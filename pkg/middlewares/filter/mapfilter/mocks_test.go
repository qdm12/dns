// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/v2/pkg/middlewares/filter/mapfilter (interfaces: Metrics)

// Package mapfilter is a generated GoMock package.
package mapfilter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// HostnamesFilteredInc mocks base method.
func (m *MockMetrics) HostnamesFilteredInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HostnamesFilteredInc", arg0, arg1)
}

// HostnamesFilteredInc indicates an expected call of HostnamesFilteredInc.
func (mr *MockMetricsMockRecorder) HostnamesFilteredInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostnamesFilteredInc", reflect.TypeOf((*MockMetrics)(nil).HostnamesFilteredInc), arg0, arg1)
}

// IPsFilteredInc mocks base method.
func (m *MockMetrics) IPsFilteredInc(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IPsFilteredInc", arg0)
}

// IPsFilteredInc indicates an expected call of IPsFilteredInc.
func (mr *MockMetricsMockRecorder) IPsFilteredInc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPsFilteredInc", reflect.TypeOf((*MockMetrics)(nil).IPsFilteredInc), arg0)
}

// SetBlockedHostnames mocks base method.
func (m *MockMetrics) SetBlockedHostnames(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockedHostnames", arg0)
}

// SetBlockedHostnames indicates an expected call of SetBlockedHostnames.
func (mr *MockMetricsMockRecorder) SetBlockedHostnames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockedHostnames", reflect.TypeOf((*MockMetrics)(nil).SetBlockedHostnames), arg0)
}

// SetBlockedIPPrefixes mocks base method.
func (m *MockMetrics) SetBlockedIPPrefixes(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockedIPPrefixes", arg0)
}

// SetBlockedIPPrefixes indicates an expected call of SetBlockedIPPrefixes.
func (mr *MockMetricsMockRecorder) SetBlockedIPPrefixes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockedIPPrefixes", reflect.TypeOf((*MockMetrics)(nil).SetBlockedIPPrefixes), arg0)
}

// SetBlockedIPs mocks base method.
func (m *MockMetrics) SetBlockedIPs(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockedIPs", arg0)
}

// SetBlockedIPs indicates an expected call of SetBlockedIPs.
func (mr *MockMetricsMockRecorder) SetBlockedIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockedIPs", reflect.TypeOf((*MockMetrics)(nil).SetBlockedIPs), arg0)
}
