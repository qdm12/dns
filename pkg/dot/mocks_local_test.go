// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_test.go

// Package dot is a generated GoMock package.
package dot

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockmiddlewareMetrics is a mock of middlewareMetrics interface.
type MockmiddlewareMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockmiddlewareMetricsMockRecorder
}

// MockmiddlewareMetricsMockRecorder is the mock recorder for MockmiddlewareMetrics.
type MockmiddlewareMetricsMockRecorder struct {
	mock *MockmiddlewareMetrics
}

// NewMockmiddlewareMetrics creates a new mock instance.
func NewMockmiddlewareMetrics(ctrl *gomock.Controller) *MockmiddlewareMetrics {
	mock := &MockmiddlewareMetrics{ctrl: ctrl}
	mock.recorder = &MockmiddlewareMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmiddlewareMetrics) EXPECT() *MockmiddlewareMetricsMockRecorder {
	return m.recorder
}

// AnswersInc mocks base method.
func (m *MockmiddlewareMetrics) AnswersInc(class, qType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AnswersInc", class, qType)
}

// AnswersInc indicates an expected call of AnswersInc.
func (mr *MockmiddlewareMetricsMockRecorder) AnswersInc(class, qType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswersInc", reflect.TypeOf((*MockmiddlewareMetrics)(nil).AnswersInc), class, qType)
}

// InFlightRequestsDec mocks base method.
func (m *MockmiddlewareMetrics) InFlightRequestsDec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InFlightRequestsDec")
}

// InFlightRequestsDec indicates an expected call of InFlightRequestsDec.
func (mr *MockmiddlewareMetricsMockRecorder) InFlightRequestsDec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InFlightRequestsDec", reflect.TypeOf((*MockmiddlewareMetrics)(nil).InFlightRequestsDec))
}

// InFlightRequestsInc mocks base method.
func (m *MockmiddlewareMetrics) InFlightRequestsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InFlightRequestsInc")
}

// InFlightRequestsInc indicates an expected call of InFlightRequestsInc.
func (mr *MockmiddlewareMetricsMockRecorder) InFlightRequestsInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InFlightRequestsInc", reflect.TypeOf((*MockmiddlewareMetrics)(nil).InFlightRequestsInc))
}

// QuestionsInc mocks base method.
func (m *MockmiddlewareMetrics) QuestionsInc(class, qType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QuestionsInc", class, qType)
}

// QuestionsInc indicates an expected call of QuestionsInc.
func (mr *MockmiddlewareMetricsMockRecorder) QuestionsInc(class, qType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionsInc", reflect.TypeOf((*MockmiddlewareMetrics)(nil).QuestionsInc), class, qType)
}

// RcodeInc mocks base method.
func (m *MockmiddlewareMetrics) RcodeInc(rcode string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RcodeInc", rcode)
}

// RcodeInc indicates an expected call of RcodeInc.
func (mr *MockmiddlewareMetricsMockRecorder) RcodeInc(rcode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RcodeInc", reflect.TypeOf((*MockmiddlewareMetrics)(nil).RcodeInc), rcode)
}

// RequestsInc mocks base method.
func (m *MockmiddlewareMetrics) RequestsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestsInc")
}

// RequestsInc indicates an expected call of RequestsInc.
func (mr *MockmiddlewareMetricsMockRecorder) RequestsInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsInc", reflect.TypeOf((*MockmiddlewareMetrics)(nil).RequestsInc))
}

// ResponsesInc mocks base method.
func (m *MockmiddlewareMetrics) ResponsesInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponsesInc")
}

// ResponsesInc indicates an expected call of ResponsesInc.
func (mr *MockmiddlewareMetricsMockRecorder) ResponsesInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesInc", reflect.TypeOf((*MockmiddlewareMetrics)(nil).ResponsesInc))
}
