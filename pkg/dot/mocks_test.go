// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/v2/pkg/dot (interfaces: Metrics,Logger,Picker)

// Package dot is a generated GoMock package.
package dot

import (
	netip "net/netip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	provider "github.com/qdm12/dns/v2/pkg/provider"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// DNSDialInc mocks base method.
func (m *MockMetrics) DNSDialInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DNSDialInc", arg0, arg1)
}

// DNSDialInc indicates an expected call of DNSDialInc.
func (mr *MockMetricsMockRecorder) DNSDialInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSDialInc", reflect.TypeOf((*MockMetrics)(nil).DNSDialInc), arg0, arg1)
}

// DoTDialInc mocks base method.
func (m *MockMetrics) DoTDialInc(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoTDialInc", arg0, arg1, arg2)
}

// DoTDialInc indicates an expected call of DoTDialInc.
func (mr *MockMetricsMockRecorder) DoTDialInc(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTDialInc", reflect.TypeOf((*MockMetrics)(nil).DoTDialInc), arg0, arg1, arg2)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), arg0)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), arg0)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), arg0)
}

// Warn mocks base method.
func (m *MockLogger) Warn(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), arg0)
}

// MockPicker is a mock of Picker interface.
type MockPicker struct {
	ctrl     *gomock.Controller
	recorder *MockPickerMockRecorder
}

// MockPickerMockRecorder is the mock recorder for MockPicker.
type MockPickerMockRecorder struct {
	mock *MockPicker
}

// NewMockPicker creates a new mock instance.
func NewMockPicker(ctrl *gomock.Controller) *MockPicker {
	mock := &MockPicker{ctrl: ctrl}
	mock.recorder = &MockPickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPicker) EXPECT() *MockPickerMockRecorder {
	return m.recorder
}

// DNSIP mocks base method.
func (m *MockPicker) DNSIP(arg0 provider.DNSServer, arg1 bool) netip.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSIP", arg0, arg1)
	ret0, _ := ret[0].(netip.Addr)
	return ret0
}

// DNSIP indicates an expected call of DNSIP.
func (mr *MockPickerMockRecorder) DNSIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSIP", reflect.TypeOf((*MockPicker)(nil).DNSIP), arg0, arg1)
}

// DNSServer mocks base method.
func (m *MockPicker) DNSServer(arg0 []provider.DNSServer) provider.DNSServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSServer", arg0)
	ret0, _ := ret[0].(provider.DNSServer)
	return ret0
}

// DNSServer indicates an expected call of DNSServer.
func (mr *MockPickerMockRecorder) DNSServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSServer", reflect.TypeOf((*MockPicker)(nil).DNSServer), arg0)
}

// DoTIP mocks base method.
func (m *MockPicker) DoTIP(arg0 provider.DoTServer, arg1 bool) netip.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTIP", arg0, arg1)
	ret0, _ := ret[0].(netip.Addr)
	return ret0
}

// DoTIP indicates an expected call of DoTIP.
func (mr *MockPickerMockRecorder) DoTIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTIP", reflect.TypeOf((*MockPicker)(nil).DoTIP), arg0, arg1)
}

// DoTServer mocks base method.
func (m *MockPicker) DoTServer(arg0 []provider.DoTServer) provider.DoTServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTServer", arg0)
	ret0, _ := ret[0].(provider.DoTServer)
	return ret0
}

// DoTServer indicates an expected call of DoTServer.
func (mr *MockPickerMockRecorder) DoTServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTServer", reflect.TypeOf((*MockPicker)(nil).DoTServer), arg0)
}

// IP mocks base method.
func (m *MockPicker) IP(arg0 []netip.Addr) netip.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IP", arg0)
	ret0, _ := ret[0].(netip.Addr)
	return ret0
}

// IP indicates an expected call of IP.
func (mr *MockPickerMockRecorder) IP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockPicker)(nil).IP), arg0)
}
