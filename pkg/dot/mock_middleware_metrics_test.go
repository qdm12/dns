// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/v2/pkg/middlewares/metrics (interfaces: Interface)

// Package dot is a generated GoMock package.
package dot

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMiddlewareMetrics is a mock of Interface interface.
type MockMiddlewareMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMetricsMockRecorder
}

// MockMiddlewareMetricsMockRecorder is the mock recorder for MockMiddlewareMetrics.
type MockMiddlewareMetricsMockRecorder struct {
	mock *MockMiddlewareMetrics
}

// NewMockMiddlewareMetrics creates a new mock instance.
func NewMockMiddlewareMetrics(ctrl *gomock.Controller) *MockMiddlewareMetrics {
	mock := &MockMiddlewareMetrics{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddlewareMetrics) EXPECT() *MockMiddlewareMetricsMockRecorder {
	return m.recorder
}

// AnswersInc mocks base method.
func (m *MockMiddlewareMetrics) AnswersInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AnswersInc", arg0, arg1)
}

// AnswersInc indicates an expected call of AnswersInc.
func (mr *MockMiddlewareMetricsMockRecorder) AnswersInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswersInc", reflect.TypeOf((*MockMiddlewareMetrics)(nil).AnswersInc), arg0, arg1)
}

// InFlightRequestsDec mocks base method.
func (m *MockMiddlewareMetrics) InFlightRequestsDec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InFlightRequestsDec")
}

// InFlightRequestsDec indicates an expected call of InFlightRequestsDec.
func (mr *MockMiddlewareMetricsMockRecorder) InFlightRequestsDec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InFlightRequestsDec", reflect.TypeOf((*MockMiddlewareMetrics)(nil).InFlightRequestsDec))
}

// InFlightRequestsInc mocks base method.
func (m *MockMiddlewareMetrics) InFlightRequestsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InFlightRequestsInc")
}

// InFlightRequestsInc indicates an expected call of InFlightRequestsInc.
func (mr *MockMiddlewareMetricsMockRecorder) InFlightRequestsInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InFlightRequestsInc", reflect.TypeOf((*MockMiddlewareMetrics)(nil).InFlightRequestsInc))
}

// QuestionsInc mocks base method.
func (m *MockMiddlewareMetrics) QuestionsInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QuestionsInc", arg0, arg1)
}

// QuestionsInc indicates an expected call of QuestionsInc.
func (mr *MockMiddlewareMetricsMockRecorder) QuestionsInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionsInc", reflect.TypeOf((*MockMiddlewareMetrics)(nil).QuestionsInc), arg0, arg1)
}

// RcodeInc mocks base method.
func (m *MockMiddlewareMetrics) RcodeInc(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RcodeInc", arg0)
}

// RcodeInc indicates an expected call of RcodeInc.
func (mr *MockMiddlewareMetricsMockRecorder) RcodeInc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RcodeInc", reflect.TypeOf((*MockMiddlewareMetrics)(nil).RcodeInc), arg0)
}

// RequestsInc mocks base method.
func (m *MockMiddlewareMetrics) RequestsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestsInc")
}

// RequestsInc indicates an expected call of RequestsInc.
func (mr *MockMiddlewareMetricsMockRecorder) RequestsInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsInc", reflect.TypeOf((*MockMiddlewareMetrics)(nil).RequestsInc))
}

// ResponsesInc mocks base method.
func (m *MockMiddlewareMetrics) ResponsesInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponsesInc")
}

// ResponsesInc indicates an expected call of ResponsesInc.
func (mr *MockMiddlewareMetricsMockRecorder) ResponsesInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesInc", reflect.TypeOf((*MockMiddlewareMetrics)(nil).ResponsesInc))
}
